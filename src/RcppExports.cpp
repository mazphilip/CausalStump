// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// invkernel_cpp
arma::mat invkernel_cpp(arma::colvec z, arma::colvec w, arma::mat mymat, Rcpp::List parameters);
RcppExport SEXP _CausalStump_invkernel_cpp(SEXP zSEXP, SEXP wSEXP, SEXP mymatSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mymat(mymatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(invkernel_cpp(z, w, mymat, parameters));
    return rcpp_result_gen;
END_RCPP
}
// mu_solution_cpp
double mu_solution_cpp(arma::colvec y, arma::colvec z, arma::mat invKmat, Rcpp::List parameters);
RcppExport SEXP _CausalStump_mu_solution_cpp(SEXP ySEXP, SEXP zSEXP, SEXP invKmatSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invKmat(invKmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_solution_cpp(y, z, invKmat, parameters));
    return rcpp_result_gen;
END_RCPP
}
// kernmat_SE_cpp
Rcpp::List kernmat_SE_cpp(Rcpp::NumericMatrix X1, Rcpp::NumericMatrix X2, Rcpp::NumericVector Z1, Rcpp::NumericVector Z2, Rcpp::List para);
RcppExport SEXP _CausalStump_kernmat_SE_cpp(SEXP X1SEXP, SEXP X2SEXP, SEXP Z1SEXP, SEXP Z2SEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(kernmat_SE_cpp(X1, X2, Z1, Z2, para));
    return rcpp_result_gen;
END_RCPP
}
// grad_SE_cpp
Rcpp::List grad_SE_cpp(arma::colvec y, arma::mat X, arma::colvec z, arma::colvec w, arma::mat Kmat, arma::mat Km, arma::mat Ka, arma::mat invKmatn, Rcpp::List parameters);
RcppExport SEXP _CausalStump_grad_SE_cpp(SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP wSEXP, SEXP KmatSEXP, SEXP KmSEXP, SEXP KaSEXP, SEXP invKmatnSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Km(KmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ka(KaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invKmatn(invKmatnSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_SE_cpp(y, X, z, w, Kmat, Km, Ka, invKmatn, parameters));
    return rcpp_result_gen;
END_RCPP
}
// Nesterov_cpp
Rcpp::List Nesterov_cpp(double learn_rate, double momentum, Rcpp::List nu, Rcpp::List grad, Rcpp::List para);
RcppExport SEXP _CausalStump_Nesterov_cpp(SEXP learn_rateSEXP, SEXP momentumSEXP, SEXP nuSEXP, SEXP gradSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Nesterov_cpp(learn_rate, momentum, nu, grad, para));
    return rcpp_result_gen;
END_RCPP
}
// Nadam_cpp
Rcpp::List Nadam_cpp(double iter, double learn_rate, double beta1, double beta2, double eps, Rcpp::List m, Rcpp::List v, Rcpp::List grad, Rcpp::List para);
RcppExport SEXP _CausalStump_Nadam_cpp(SEXP iterSEXP, SEXP learn_rateSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsSEXP, SEXP mSEXP, SEXP vSEXP, SEXP gradSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Nadam_cpp(iter, learn_rate, beta1, beta2, eps, m, v, grad, para));
    return rcpp_result_gen;
END_RCPP
}
// Adam_cpp
Rcpp::List Adam_cpp(double iter, double learn_rate, double beta1, double beta2, double eps, Rcpp::List m, Rcpp::List v, Rcpp::List grad, Rcpp::List para);
RcppExport SEXP _CausalStump_Adam_cpp(SEXP iterSEXP, SEXP learn_rateSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsSEXP, SEXP mSEXP, SEXP vSEXP, SEXP gradSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Adam_cpp(iter, learn_rate, beta1, beta2, eps, m, v, grad, para));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CausalStump_invkernel_cpp", (DL_FUNC) &_CausalStump_invkernel_cpp, 4},
    {"_CausalStump_mu_solution_cpp", (DL_FUNC) &_CausalStump_mu_solution_cpp, 4},
    {"_CausalStump_kernmat_SE_cpp", (DL_FUNC) &_CausalStump_kernmat_SE_cpp, 5},
    {"_CausalStump_grad_SE_cpp", (DL_FUNC) &_CausalStump_grad_SE_cpp, 9},
    {"_CausalStump_Nesterov_cpp", (DL_FUNC) &_CausalStump_Nesterov_cpp, 5},
    {"_CausalStump_Nadam_cpp", (DL_FUNC) &_CausalStump_Nadam_cpp, 9},
    {"_CausalStump_Adam_cpp", (DL_FUNC) &_CausalStump_Adam_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_CausalStump(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
